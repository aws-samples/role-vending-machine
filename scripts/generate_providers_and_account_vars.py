import os
import json
import logging
import requests
import argparse
import boto3

RVM_ROLE = "github-assume-role-rvm"
AWS_REGION = os.getenv("AWS_REGION")
GITHUB_REPO = os.getenv("GITHUB_REPO")
GITHUB_ORG = os.getenv("GITHUB_ORG")
VARIABLES_OUTPUT_FILE_NAME = "zz-do-not-modify-variables-accounts.tf"
PROVIDERS_OUTPUT_FILE_NAME = "zz-do-not-modify-providers.tf"
READONLY_PROVIDERS_OUTPUT_FILE_NAME = "zz-do-not-modify-providers-readonly.tf"

if os.environ.get("GITHUB_TOKEN") is None:
    raise EnvironmentError("GITHUB_TOKEN is not set in the environment")
else:
    headers = {
        "Authorization": "Bearer " + os.getenv("GITHUB_TOKEN"),
        "Accept": "application/vnd.github+json",
    }


# def get_account_list():
#     response = requests.get(
#         f"https://api.github.com/repos/{GITHUB_ORG}/{GITHUB_REPO}/contents/accounts.json",
#         headers=headers,
#         timeout=10,
#     )
#     response = requests.get(response.json().get("download_url"), timeout=10)
#     return response.json()


def get_provider_block(account, aws_region, rvm_role, readonly_suffix):
    account_name = account.get("Name").replace(" ", "_")
    account_id = account.get("Id")
    provider_text = f"""
provider "aws" {{
  alias  = "{account_name}"
  region = "{aws_region}"
  assume_role {{
    role_arn = "arn:aws:iam::{account_id}:role/{rvm_role}{readonly_suffix}"
  }}
  default_tags {{
    tags = module.tagging_module.tag_map
  }}
}}
"""
    return provider_text


def get_variable_block(account):
    account_name = account.get("Name").replace(" ", "_")
    account_id = account.get("Id")
    variable_text = f"""
variable "account_{account_name}" {{
  type    = string
  default = "{account_id}"
}}
"""
    return variable_text


def main():
    paginator = boto3.client("organizations").get_paginator("list_accounts")
    account_list = []
    for page in paginator.paginate():
        account_list.extend(page["Accounts"])

    if not account_list:
        raise Exception("No accounts found")

    for file_name in [PROVIDERS_OUTPUT_FILE_NAME, READONLY_PROVIDERS_OUTPUT_FILE_NAME]:
        with open(f"role-vending-machine/{file_name}", "w") as f:
            if file_name == READONLY_PROVIDERS_OUTPUT_FILE_NAME:
                readonly_suffix = "-readonly"
            else:
                readonly_suffix = ""
            f.write(
                f"# DO NOT EDIT! Automatically generated by scripts/generate_providers_and_account_vars.py\n"
            )
            f.write(
                f"# To Rebuild {file_name}, execute the generate_providers_and_account_vars GitHub workflow.\n\n"
            )

            for account in account_list:
                provider_text = get_provider_block(
                    account, AWS_REGION, RVM_ROLE, readonly_suffix
                )
                f.write(provider_text)

    with open(f"role-vending-machine/{VARIABLES_OUTPUT_FILE_NAME}", "w") as f:
        f.write(
            f"# DO NOT EDIT! Automatically generated by scripts/generate_providers_and_account_vars.py\n"
        )
        f.write(
            f"# To rebuild {VARIABLES_OUTPUT_FILE_NAME}, execute the generate_providers_and_account_vars GitHub workflow.\n\n\n"
        )

        for account in account_list:
            variable_text = get_variable_block(account)
            f.write(variable_text)


if __name__ == "__main__":
    # parser = argparse.ArgumentParser()
    # parser.add_argument('--path', default = "", help='Provide a filename to write out account ist too')
    # args = parser.parse_args()
    # main(args.path)
    main()
